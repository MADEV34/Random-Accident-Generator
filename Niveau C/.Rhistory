# Importation des paquetages
require(tidyverse)
# Importation des paquetages
require(tidyverse)
require(maps)
require(ggplot2)
require(RColorBrewer)
tremblements <- tremblements[!is.na(tremblements$temps), ]
```{r dates.hist}
?eqlist
install.packages("kableExtra")
install.packages("rstudioapi")
install.packages("rvest")
install.packages("xml2")
install.packages("webshot")
library(mice)
knitr::opts_chunk$set(echo = TRUE)
data(ausprivauto0405)
# Importation des paquetages
library(CASdatasets)
data(ausprivauto0405)
levels(Auto$VegAge)
levels(Auto$VehAge)
Auto <- ausprivauto0405
levels(Auto$VehAge)
Auto$VehIsOldest <- Auto$VehAge == "oldest cars"
levels(Auto$VehIsOldest)
summary(Auto$VehIsOldest)
summary(Auto)
size1 <- sum(data$ClaimNb >= 1)
set.seed(9663)
n_echantillons <- 250
indices_bootstrap <- lapply(1:n_echantillons, function(x) sample(nrow(Auto), size = 0.25*nrow(Auto), replace = TRUE))
echantillons_bootstrap <- lapply(indices_bootstrap, function(x) Auto[x,])
generer_NMAR <- function(data){
data$ClaimNb_Old <- data$ClaimNb
# À FAIRE
# L'entrée de la fonction est un data.frame sans données manquante pour la variable ClaimNb
# La sortie est un data.frame avec des données manquantes (NMAR) pour la variable ClaimNb
# Note: Nous avons stocké la variable initiale 'ClaimNb' (sans donnée manquante) dans une
#       variable appelée 'ClaimNb_old'. Elle vous sera utile pour générer les données manquantes
#       et aussi pour faire la validation de la fonction.
size1 <- sum(data$ClaimNb_old >= 1)
size0 <- sum(data$ClaimNb_old == 0)
data[data$ClaimNb_old >= 1,]$ClaimNb[sample(x = size1, size = size1*0.56)] <- NA
data[data$ClaimNb_old == 0,]$ClaimNb[sample(x = sizeF, size = size0*0.28)] <- NA
data
data
}
# Itérer sur les échantillons et appliquer la fonction
# Note: On réutilise le output de la question précédente (auto_missing)
auto_missing <- lapply(auto_missing, function(x) generer_NMAR(x))
generer_MCAR <- function(data){
data$VehValue[sample(x = nrow(data), size = nrow(data)*0.3)] <- NA
data
}
# Itérer sur les 250 échantillons en appliquant la fonction
auto_missing <- lapply(echantillons_bootstrap, function(x) generer_MCAR(x))
# Itérer sur les échantillons et appliquer la fonction
# Note: On réutilise le output de la question précédente (auto_missing)
auto_missing <- lapply(auto_missing, function(x) generer_NMAR(x))
generer_NMAR <- function(data){
data$ClaimNb_Old <- data$ClaimNb
# À FAIRE
# L'entrée de la fonction est un data.frame sans données manquante pour la variable ClaimNb
# La sortie est un data.frame avec des données manquantes (NMAR) pour la variable ClaimNb
# Note: Nous avons stocké la variable initiale 'ClaimNb' (sans donnée manquante) dans une
#       variable appelée 'ClaimNb_old'. Elle vous sera utile pour générer les données manquantes
#       et aussi pour faire la validation de la fonction.
size1 <- sum(data$ClaimNb_old >= 1)
size0 <- sum(data$ClaimNb_old == 0)
data[data$ClaimNb_old >= 1,]$ClaimNb[sample(x = size1, size = size1*0.56)] <- NA
data[data$ClaimNb_old == 0,]$ClaimNb[sample(x = size0, size = size0*0.28)] <- NA
data
data
}
# Itérer sur les échantillons et appliquer la fonction
# Note: On réutilise le output de la question précédente (auto_missing)
auto_missing <- lapply(auto_missing, function(x) generer_NMAR(x))
verif <- unlist(lapply(auto_missing, function(x) sum(is.na(x$ClaimNb[x$ClaimNb_old == 0]))/sum(x$ClaimNb_old == 0)))
c(min(verif), max(verif))
verif2 <- unlist(lapply(auto_missing, function(x) sum(is.na(x$ClaimNb[x$ClaimNb_old > 0]))/sum(x$ClaimNb_old > 0)))
c(min(verif2), max(verif2))
View(echantillons_bootstrap)
View(auto_missing)
generer_NMAR <- function(data){
data$ClaimNb_Old <- data$ClaimNb
size1 <- sum(data$ClaimNb_Old >= 1)
size0 <- sum(data$ClaimNb_Old == 0)
data[data$ClaimNb_Old >= 1,]$ClaimNb[sample(x = size1, size = size1*0.56)] <- NA
data[data$ClaimNb_Old == 0,]$ClaimNb[sample(x = size0, size = size0*0.28)] <- NA
data
}
auto_missing <- lapply(auto_missing, function(x) generer_NMAR(x))
auto_missing[[1]]
xx <- auto_missing[[1]]
sum(is.na(xx$ClaimNb[xx$ClaimNb_Old == 0]))/sum(xx$ClaimNb_Old == 0))
sum(is.na(xx$ClaimNb[xx$ClaimNb_Old == 0]))/sum(xx$ClaimNb_Old == 0)
# Importation des paquetages
library(CASdatasets)
library(mice)
data(ausprivauto0405)
Auto <- ausprivauto0405
str(Auto)
Auto$VehIsOldest <- Auto$VehAge == "oldest cars"
apply(apply(Auto, 2, is.na), 2, sum)
set.seed(9663)
n_echantillons <- 250
indices_bootstrap <- lapply(1:n_echantillons, function(x) sample(nrow(Auto), size = 0.25*nrow(Auto), replace = TRUE))
indices_bootstrap <- lapply(1:n_echantillons, function(x) sample(nrow(Auto), size = 0.25*nrow(Auto), replace = TRUE))
echantillons_bootstrap <- lapply(indices_bootstrap, function(x) Auto[x,])
```{r mcar}
Dans un premier temps, nous allons générer artificiellement 30% de cas manquants pour la variable `VehValue`, de manière complètement aléatoire (MCAR).
```{r mcar}
generer_MCAR <- function(data){
set.seed(9663)
n_echantillons <- 250
indices_bootstrap <- lapply(1:n_echantillons, function(x) sample(nrow(Auto), size = 0.25*nrow(Auto), replace = TRUE))
echantillons_bootstrap <- lapply(indices_bootstrap, function(x) Auto[x,])
generer_MCAR <- function(data){
data$VehValue[sample(x = nrow(data), size = nrow(data)*0.3)] <- NA
data
}
# Itérer sur les 250 échantillons en appliquant la fonction
auto_missing <- lapply(echantillons_bootstrap, function(x) generer_MCAR(x))
generer_MAR <- function(data){
sizeM <- sum(data$Gender == "Male")
sizeF <- sum(data$Gender == "Female")
data[data$Gender == "Male",]$VehIsOldest[sample(x = sizeM, size = sizeM*0.42)] <- NA
data[data$Gender == "Female",]$VehIsOldest[sample(x = sizeF, size = sizeF*0.21)] <- NA
data
}
# Itérer sur les échantillons et appliquer la fonction
# Note: On réutilise le output de la question précédente (auto_missing)
auto_missing <- lapply(auto_missing, function(x) generer_MAR(x))
generer_NMAR <- function(data){
data$ClaimNb_Old <- data$ClaimNb
size1 <- sum(data$ClaimNb_Old >= 1)
size0 <- sum(data$ClaimNb_Old == 0)
data[data$ClaimNb_Old >= 1,]$ClaimNb[sample(x = size1, size = size1*0.56)] <- NA
data[data$ClaimNb_Old == 0,]$ClaimNb[sample(x = size0, size = size0*0.28)] <- NA
data
}
auto_missing <- lapply(auto_missing, function(x) generer_NMAR(x))
verif <- unlist(lapply(auto_missing, function(x) sum(is.na(x$ClaimNb[x$ClaimNb_Old == 0]))/sum(x$ClaimNb_Old == 0)))
c(min(verif), max(verif))
verif2 <- unlist(lapply(auto_missing, function(x) sum(is.na(x$ClaimNb[x$ClaimNb_Old > 0]))/sum(x$ClaimNb_Old > 0)))
c(min(verif2), max(verif2))
verif <- unlist(lapply(auto_missing, function(x) sum(is.na(x$ClaimNb[x$ClaimNb_Old == 0]))/sum(x$ClaimNb_Old == 0)))
gredt3
=12-03)
verif <- unlist(lapply(auto_missing, function(x) sum(is.na(x$ClaimNb[x$ClaimNb_Old == 0]))/sum(x$ClaimNb_Old == 0)))
c(min(verif), max(verif))
verif2 <- unlist(lapply(auto_missing, function(x) sum(is.na(x$ClaimNb[x$ClaimNb_Old > 0]))/sum(x$ClaimNb_Old > 0)))
c(min(verif2), max(verif2))
md.pattern(auto_missing[[1]])
data(ausprivauto0405)
Auto <- ausprivauto0405
str(Auto)
?chisq.test
# On prend le premier echantillon bootstrap
echantillon_1 <- auto_missing[[1]]
# On prend le premier echantillon bootstrap
echantillon_1 <- auto_missing[[1]]
data(ausprivauto0405)
Auto <- ausprivauto0405
str(Auto)
Auto$VehIsOldest <- Auto$VehAge == "oldest cars"
apply(apply(Auto, 2, is.na), 2, sum)
set.seed(9663)
n_echantillons <- 250
indices_bootstrap <- lapply(1:n_echantillons, function(x) sample(nrow(Auto), size = 0.25*nrow(Auto), replace = TRUE))
indices_bootstrap <- lapply(1:n_echantillons, function(x) sample(nrow(Auto), size = 0.25*nrow(Auto), replace = TRUE))
echantillons_bootstrap <- lapply(indices_bootstrap, function(x) Auto[x,])
generer_MCAR <- function(data){
data$VehValue[sample(x = nrow(data), size = nrow(data)*0.3)] <- NA
data
}
# Itérer sur les 250 échantillons en appliquant la fonction
auto_missing <- lapply(echantillons_bootstrap, function(x) generer_MCAR(x))
# Itérer sur les 250 échantillons en appliquant la fonction
auto_missing <- lapply(echantillons_bootstrap, function(x) generer_MCAR(x))
generer_MAR <- function(data){
sizeM <- sum(data$Gender == "Male")
sizeF <- sum(data$Gender == "Female")
data[data$Gender == "Male",]$VehIsOldest[sample(x = sizeM, size = sizeM*0.42)] <- NA
data[data$Gender == "Female",]$VehIsOldest[sample(x = sizeF, size = sizeF*0.21)] <- NA
data
}
# Itérer sur les échantillons et appliquer la fonction
# Note: On réutilise le output de la question précédente (auto_missing)
auto_missing <- lapply(auto_missing, function(x) generer_MAR(x))
generer_NMAR <- function(data){
data$ClaimNb_Old <- data$ClaimNb
size1 <- sum(data$ClaimNb_Old >= 1)
size0 <- sum(data$ClaimNb_Old == 0)
data[data$ClaimNb_Old >= 1,]$ClaimNb[sample(x = size1, size = size1*0.56)] <- NA
data[data$ClaimNb_Old == 0,]$ClaimNb[sample(x = size0, size = size0*0.28)] <- NA
data
}
auto_missing <- lapply(auto_missing, function(x) generer_NMAR(x))
verif <- unlist(lapply(auto_missing, function(x) sum(is.na(x$ClaimNb[x$ClaimNb_Old == 0]))/sum(x$ClaimNb_Old == 0)))
c(min(verif), max(verif))
verif2 <- unlist(lapply(auto_missing, function(x) sum(is.na(x$ClaimNb[x$ClaimNb_Old > 0]))/sum(x$ClaimNb_Old > 0)))
c(min(verif2), max(verif2))
# On prend le premier echantillon bootstrap
echantillon_1 <- auto_missing[[1]]
manquante <- is.na(echantillon1$VehIsOldest)
# On prend le premier echantillon bootstrap
echantillon_1 <- auto_missing[[1]]
manquante <- is.na(echantillon1$VehIsOldest)
# On prend le premier echantillon bootstrap
echantillon_1 <- auto_missing[[1]]
manquante <- is.na(echantillon_1$VehIsOldest)
chisq.test(echantillon_1$Gender, manquante, correct=FALSE)
chisq.test(echantillon_1$DrivAge, manquante, correct=FALSE)
md.pattern(auto_missing[[1]])
t.test(echantillon_1$Exposure[is.na(VehValue)],echantillon_1$Exposure[!is.na(VehValue)],var.equal=FALSE)
# On prend le premier echantillon bootstrap
echantillon_1 <- auto_missing[[1]]
# On prend le premier echantillon bootstrap
echantillon_1 <- auto_missing[[1]]
t.test(echantillon_1$Exposure[is.na(echantillon_1$VehValue)],echantillon_1$Exposure[!is.na(echantillon_1$VehValue)],var.equal=FALSE)
# On prend le premier echantillon bootstrap
echantillon_1 <- auto_missing[[1]]
knitr::opts_chunk$set(echo = TRUE)
# Installation des paquetages (si necessaire)
# install.packages("devtools")
# install.packages("kableExtra")
# install.packages("mice")
# install.packages("CASdatasets", repos = "http://cas.uqam.ca/pub/R/", type="source")
# Importation des paquetages
library(CASdatasets)
library(kableExtra)
library(mice)
# Initialiser les tests unitaires pour les questions 1 à 3.
#testrmd::init()
data(ausprivauto0405)
Auto <- ausprivauto0405
str(Auto)
knitr::opts_chunk$set(echo = TRUE)
# Installation des paquetages (si necessaire)
# install.packages("devtools")
# install.packages("kableExtra")
# install.packages("mice")
# install.packages("CASdatasets", repos = "http://cas.uqam.ca/pub/R/", type="source")
# Importation des paquetages
library(CASdatasets)
library(kableExtra)
library(mice)
# Initialiser les tests unitaires pour les questions 1 à 3.
#testrmd::init()
data(ausprivauto0405)
Auto <- ausprivauto0405
str(Auto)
Auto$VehIsOldest <- Auto$VehAge == "oldest cars"
apply(apply(Auto, 2, is.na), 2, sum)
set.seed(9663)
n_echantillons <- 250
indices_bootstrap <- lapply(1:n_echantillons, function(x) sample(nrow(Auto), size = 0.25*nrow(Auto), replace = TRUE))
echantillons_bootstrap <- lapply(indices_bootstrap, function(x) Auto[x,])
generer_MCAR <- function(data){
data$VehValue[sample(x = nrow(data), size = nrow(data)*0.3)] <- NA
data
}
# Itérer sur les 250 échantillons en appliquant la fonction
auto_missing <- lapply(echantillons_bootstrap, function(x) generer_MCAR(x))
generer_MAR <- function(data){
sizeM <- sum(data$Gender == "Male")
sizeF <- sum(data$Gender == "Female")
data[data$Gender == "Male",]$VehIsOldest[sample(x = sizeM, size = sizeM*0.42)] <- NA
data[data$Gender == "Female",]$VehIsOldest[sample(x = sizeF, size = sizeF*0.21)] <- NA
data
}
# Itérer sur les échantillons et appliquer la fonction
# Note: On réutilise le output de la question précédente (auto_missing)
auto_missing <- lapply(auto_missing, function(x) generer_MAR(x))
generer_NMAR <- function(data){
data$ClaimNb_Old <- data$ClaimNb
size1 <- sum(data$ClaimNb_Old >= 1)
size0 <- sum(data$ClaimNb_Old == 0)
data[data$ClaimNb_Old >= 1,]$ClaimNb[sample(x = size1, size = size1*0.56)] <- NA
data[data$ClaimNb_Old == 0,]$ClaimNb[sample(x = size0, size = size0*0.28)] <- NA
data
}
auto_missing <- lapply(auto_missing, function(x) generer_NMAR(x))
verif <- unlist(lapply(auto_missing, function(x) sum(is.na(x$ClaimNb[x$ClaimNb_Old == 0]))/sum(x$ClaimNb_Old == 0)))
c(min(verif), max(verif))
verif2 <- unlist(lapply(auto_missing, function(x) sum(is.na(x$ClaimNb[x$ClaimNb_Old > 0]))/sum(x$ClaimNb_Old > 0)))
c(min(verif2), max(verif2))
md.pattern(auto_missing[[1]])
# On prend le premier echantillon bootstrap
echantillon_1 <- auto_missing[[1]]
manquante <- is.na(echantillon_1$VehIsOldest)
chisq.test(echantillon_1$Gender, manquante, correct=FALSE)
chisq.test(echantillon_1$DrivAge, manquante, correct=FALSE)
# On prend le premier echantillon bootstrap
echantillon_1 <- auto_missing[[1]]
t.test(echantillon_1$Exposure[is.na(echantillon_1$VehValue)],echantillon_1$Exposure[!is.na(echantillon_1$VehValue)],var.equal=FALSE)
t.test(echantillon_1$ClaimAmount[is.na(echantillon_1$VehValue)],echantillon_1$ClaimAmount[!is.na(echantillon_1$VehValue)],var.equal=FALSE)
mean(auto_missing$VehValue)
mean(auto_missing$VehValue, na.rm = T)
unlist(lapply(auto_missing, function(x) mean(x$VehValue, na.rm = T)
unlist(lapply(auto_missing, function(x) mean(x$VehValue, na.rm = T))
unlist(lapply(auto_missing, function(x) mean(x$VehValue, na.rm = T)))
lapply(auto_missing, function(x) mean(x$VehValue, na.rm = T))
meanVehValue <- unlist(lapply(auto_missing, function(x) mean(x$VehValue, na.rm = T)))
hist(meanVehValue, breaks = 20)
abline(v = mean(Auto$VehValue))
hist(meanVehValue, breaks = 20)
abline(v = mean(Auto$VehValue))
meanVehValue <- unlist(lapply(auto_missing, function(x) mean(x$VehValue, na.rm = T)))
hist(meanVehValue, breaks = 20)
abline(v = mean(Auto$VehValue))
?hist
meanVehValue <- unlist(lapply(auto_missing, function(x) mean(x$VehValue, na.rm = T)))
hist(meanVehValue, breaks = 20)
abline(v = mean(Auto$VehValue))
meanVehValue
meanVehIsOldest <- unlist(lapply(auto_missing, function(x) mean(x$VehIsOldest, na.rm = T)))
hist(meanVehIsOldest, breaks = 20)
abline(v = mean(Auto$VehIsOldest))
# Imputation par la moyenne et
# Calcul de la sd de chaque échantillon bootstrap
sd_VehValue_boot <- sapply(auto_missing, function(data){
data$VehValue[is.na(data$VehValue)] <- mean(data$VehValue, na.rm = TRUE)
sd(data$VehValue)
})
# Calcul de la "vraie" sd
sd_VehValue_true <- sd(Auto$VehValue)
# Histogramme
hist(sd_VehValue_boot, xlim = range(c(sd_VehValue_boot,sd_VehValue_true)), breaks = 25)
abline(v = sd_VehValue_true, col = "red", lwd = 2)
# Imputation par la moyenne et
# Calcul de la sd de chaque échantillon bootstrap
sd_VehValue_boot <- sapply(auto_missing, function(data){
data$VehValue[is.na(data$VehValue)] <- mean(data$VehValue, na.rm = TRUE)
sd(data$VehValue)
})
# Calcul de la "vraie" sd
sd_VehValue_true <- sd(Auto$VehValue)
# Histogramme
hist(sd_VehValue_boot, xlim = range(c(sd_VehValue_boot,sd_VehValue_true)), breaks = 25)
abline(v = sd_VehValue_true, col = "red", lwd = 2)
R.home()
version()
version
prop_boot <- sapply(auto_missing, function(data){
my_glm <- glm(VehIsOldest~Gender, data, family="binomial")
missing <- is.na(VehIsOldest)
imp <- predict(my_glm, type="response", newdata=data[missing,])
c(mean(data$VehIsOldest),sd(data$VehIsOldest))
})
prop_boot <- sapply(auto_missing, function(data){
my_glm <- glm(VehIsOldest~Gender, data, family="binomial")
missing <- is.na(data$VehIsOldest)
imp <- predict(my_glm, type="response", newdata=data[missing,])
c(mean(data$VehIsOldest),sd(data$VehIsOldest))
})
prop_boot <- sapply(auto_missing, function(data){
my_glm <- glm(VehIsOldest~Gender, data, family="binomial")
missing <- is.na(data$VehIsOldest)
imp <- predict(my_glm, type="response", newdata=data[missing,])
c(mean(data$VehIsOldest),sd(data$VehIsOldest))
})
dt <- data.frame(
methode = c("Vrai", "Imp. Reg."),
mean = c(mean(Auto$VehIsOldest), mean(prop_boot[1,])),
sd = c(sd(Auto$VehIsOldest), mean(prop_boot[2,]))
)
kable(dt,
format = "html",
row.names = F,
col.names = c("Méthode", "E[VehIsOldest]", "sd(VehIsOldest)"),
digits = 3,
caption = "Estimateurs de la moyenne et la variance de VehIsOldest par la méthode d'imputation par régression dans un cas MAR.") %>%
kable_styling()
imp
prop_boot <- sapply(auto_missing, function(data){
my_glm <- glm(VehIsOldest~Gender, data, family="binomial")
missing <- is.na(data$VehIsOldest)
imp <- predict(my_glm, type="response", newdata=data[missing,])
c(mean(data$VehIsOldest),sd(data$VehIsOldest))
})
prop_boot <- sapply(auto_missing, function(data){
my_glm <- glm(VehIsOldest~Gender, data, family="binomial")
missing <- is.na(data$VehIsOldest)
imp <- predict(my_glm, type="response", newdata=data[missing,])
c(mean(data$VehIsOldest),sd(data$VehIsOldest))
})
imp <- predict(my_glm, type="response", newdata=data[mis
prop_boot <- sapply(auto_missing, function(data){
prop_boot <- sapply(auto_missing, function(data){
my_glm <- glm(VehIsOldest~Gender, data, family="binomial")
missing <- is.na(data$VehIsOldest)
predict(my_glm, type="response", newdata=data[missing,])
c(mean(data$VehIsOldest),sd(data$VehIsOldest))
})
prop_boot <- sapply(auto_missing, function(data){
my_glm <- glm(VehIsOldest~Gender, data, family="binomial")
missing <- is.na(data$VehIsOldest)
data$VehIsOldest <- predict(my_glm, type="response", newdata=data[missing,])
c(mean(data$VehIsOldest),sd(data$VehIsOldest))
})
prop_boot <- sapply(auto_missing, function(data){
my_glm <- glm(VehIsOldest~Gender, data, family="binomial")
missing <- is.na(data$VehIsOldest)
predict(my_glm, type="response", newdata=data[missing,])
c(mean(data$VehIsOldest),sd(data$VehIsOldest))
})
View(prop_boot)
prop_boot <- sapply(auto_missing, function(data){
my_glm <- glm(VehIsOldest~Gender, data, family="binomial")
missing <- is.na(data$VehIsOldest)
data[missing, "VehIsOldest"] <- predict(my_glm, type="response", newdata=data[missing,])
c(mean(data$VehIsOldest),sd(data$VehIsOldest))
})
View(prop_boot)
dt <- data.frame(
methode = c("Vrai", "Imp. Reg."),
mean = c(mean(Auto$VehIsOldest), mean(prop_boot[1,])),
sd = c(sd(Auto$VehIsOldest), mean(prop_boot[2,]))
)
kable(dt,
format = "html",
row.names = F,
col.names = c("Méthode", "E[VehIsOldest]", "sd(VehIsOldest)"),
digits = 3,
caption = "Estimateurs de la moyenne et la variance de VehIsOldest par la méthode d'imputation par régression dans un cas MAR.") %>%
kable_styling()
prop_boot <- sapply(auto_missing, function(data){
my_glm <- glm(VehIsOldest~Gender, data, family="binomial")
missing <- is.na(data$VehIsOldest)
data[missing, "VehIsOldest"] <- predict(my_glm, type="response", newdata=data[missing,])
c(mean(data$VehIsOldest),sd(data$VehIsOldest))
})
dt <- data.frame(
methode = c("Vrai", "Imp. Reg."),
mean = c(mean(Auto$VehIsOldest), mean(prop_boot[1,])),
sd = c(sd(Auto$VehIsOldest), mean(prop_boot[2,]))
)
kable(dt,
format = "html",
row.names = F,
col.names = c("Méthode", "E[VehIsOldest]", "sd(VehIsOldest)"),
digits = 3,
caption = "Estimateurs de la moyenne et la variance de VehIsOldest par la méthode d'imputation par régression dans un cas MAR.") %>%
kable_styling()
kable(dt,
format = "html",
table.attr = "style = \"color: black;\"",
row.names = F,
col.names = c("Méthode", "E[VehIsOldest]", "sd(VehIsOldest)"),
digits = 3,
caption = "Estimateurs de la moyenne et la variance de VehIsOldest par la méthode d'imputation par régression dans un cas MAR.") %>%
kable_styling()
kable(dt,
format = "html",
table.attr = "style = \"color: black;\"",
row.names = F,
col.names = c("Méthode", "E[VehIsOldest]", "sd(VehIsOldest)"),
digits = 3,
caption = "Estimateurs de la moyenne et la variance de VehIsOldest par la méthode d'imputation par régression dans un cas MAR.") %>%
kable_styling()
pt(-3.26, lower.tail = T)
pt(-3.26, lower.tail = T, df = 22.5)
qt(-3.26, lower.tail = T, df = 22.5)
pt(-3.26, lower.tail = T, df = 22.5)
shiny::runApp('C:/Users/marcs/OneDrive - Université Laval/Université/Session 6/Dépannage IARD II/Niveau A')
runApp()
runApp('C:/Users/marcs/OneDrive - Université Laval/Université/Session 6/Dépannage IARD II/Niveau A')
runApp()
runApp('C:/Users/marcs/OneDrive - Université Laval/Université/Session 6/Dépannage IARD II/Niveau A')
deployApp()
shiny::runApp('C:/Users/marcs/OneDrive - Université Laval/Université/Session 6/Dépannage IARD II/Niveau A')
deployApp()
deployApp()
setwd("C:/Users/marcs/OneDrive - Université Laval/Université/Session 6/Dépannage IARD II/Niveau A")
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
runApp('C:/Users/marcs/OneDrive - Université Laval/Université/Session 6/Dépannage IARD II/Niveau B')
deployApp()
setwd("C:/Users/marcs/OneDrive - Université Laval/Université/Session 6/Dépannage IARD II/Niveau B")
deployApp()
setwd("C:/Users/marcs/OneDrive - Université Laval/Université/Session 6/Dépannage IARD II/Niveau C")
deployApp()
